package org.roybond007.repository;

import java.util.Optional;

import org.roybond007.model.dto.EntityListUpdatedResponseBody;
import org.roybond007.model.dto.MoviePageObject;
import org.roybond007.model.dto.UserInfoResponseBody;
import org.roybond007.model.dto.UserProfileInfoResponseBody;
import org.roybond007.model.entity.UserEntity;
import org.springframework.data.mongodb.repository.Aggregation;
import org.springframework.data.mongodb.repository.Meta;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserEntityRepository extends PagingAndSortingRepository<UserEntity, String>, CustomUserEntityRepository{

	@Meta(allowDiskUse = true)
	@Query(fields = "{_id: 1, userId: 1, password: 1, emailId: 1, roles: 1, isActive: 1}")
	Optional<UserEntity> findByUserId(String userId);

	
	@Meta(allowDiskUse = true)
	@Aggregation(pipeline = {
			"{\r\n"
			+ "        $match: {\r\n"
			+ "            userId: ?0\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "        $project: {\r\n"
			+ "            _id: \"$userId\",\r\n"
			+ "            wishListPage: {\r\n"
			+ "                $slice: [\"$wishList\", ?1, ?2]\r\n"
			+ "            }\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "        $unwind: {\r\n"
			+ "            path: \"$wishListPage\",\r\n"
			+ "            preserveNullAndEmptyArrays: true\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "    $lookup: {\r\n"
			+ "      from: \"movieEntity\",\r\n"
			+ "      let: {\r\n"
			+ "        movieId: \"$wishListPage._id\",\r\n"
			+ "      },\r\n"
			+ "      pipeline: [\r\n"
			+ "        {\r\n"
			+ "          $match: {\r\n"
			+ "            $expr: {\r\n"
			+ "              $eq: [\"$_id\", \"$$movieId\"],\r\n"
			+ "            },\r\n"
			+ "          },\r\n"
			+ "        },\r\n"
			+ "        {\r\n"
			+ "          $set: {\r\n"
			+ "            rating: {\r\n"
			+ "              $first: {\r\n"
			+ "                $filter: {\r\n"
			+ "                  input: \"$ratingList\",\r\n"
			+ "                  as: \"elem\",\r\n"
			+ "                  cond: {\r\n"
			+ "                    $eq: [\"$$elem._id\", ?0],\r\n"
			+ "                  },\r\n"
			+ "                },\r\n"
			+ "              },\r\n"
			+ "            },\r\n"
			+ "          },\r\n"
			+ "        },\r\n"
			+ "        {\r\n"
			+ "          $project: {\r\n"
			+ "            _id: 1,\r\n"
			+ "            title: 1,\r\n"
			+ "            description: 1,\r\n"
			+ "            genres: 1,\r\n"
			+ "            posterLink: 1,\r\n"
			+ "            avgRating: {\r\n"
			+ "              $cond: {\r\n"
			+ "                if: {\r\n"
			+ "                  $eq: [\"$totalRating\", NumberLong(0)],\r\n"
			+ "                },\r\n"
			+ "                then: 0,\r\n"
			+ "                else: {\r\n"
			+ "                  $toDouble: {\r\n"
			+ "                    $divide: [\r\n"
			+ "                      { $toDouble: \"$totalRating\" },\r\n"
			+ "                      { $toDouble: \"$noOfRatings\" },\r\n"
			+ "                    ],\r\n"
			+ "                  },\r\n"
			+ "                },\r\n"
			+ "              },\r\n"
			+ "            },\r\n"
			+ "            noOfRatings: 1,\r\n"
			+ "            userRating: {\r\n"
			+ "              $ifNull: [\"$rating.rating\", 0],\r\n"
			+ "            },\r\n"
			+ "          },\r\n"
			+ "        },\r\n"
			+ "      ],\r\n"
			+ "      as: \"movieObject\",\r\n"
			+ "    },\r\n"
			+ "  }",
			"{\r\n"
			+ "        $group: {\r\n"
			+ "            _id: \"$_id\",\r\n"
			+ "            result: {\r\n"
			+ "                $push: {\r\n"
			+ "                    $first: \"$movieObject\"\r\n"
			+ "                }\r\n"
			+ "            }\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "        $project: {\r\n"
			+ "            _id: 0,\r\n"
			+ "            result: 1\r\n"
			+ "        }\r\n"
			+ "    }"
	})
	MoviePageObject findWishListMovies(String userId, int index, int length);


	@Meta(allowDiskUse = true)
	@Aggregation(pipeline = {
			"{\r\n"
					+ "        $match: {\r\n"
					+ "            userId: ?0\r\n"
					+ "        }\r\n"
					+ "    }",
					"{\r\n"
					+ "        $project: {\r\n"
					+ "            _id: \"$userId\",\r\n"
					+ "            watchListPage: {\r\n"
					+ "                $slice: [\"$watchList\", ?1, ?2]\r\n"
					+ "            }\r\n"
					+ "        }\r\n"
					+ "    }",
					"{\r\n"
					+ "        $unwind: {\r\n"
					+ "            path: \"$watchListPage\",\r\n"
					+ "            preserveNullAndEmptyArrays: true\r\n"
					+ "        }\r\n"
					+ "    }",
					"{\r\n"
					+ "    $lookup: {\r\n"
					+ "      from: \"movieEntity\",\r\n"
					+ "      let: {\r\n"
					+ "        movieId: \"$watchListPage._id\",\r\n"
					+ "      },\r\n"
					+ "      pipeline: [\r\n"
					+ "        {\r\n"
					+ "          $match: {\r\n"
					+ "            $expr: {\r\n"
					+ "              $eq: [\"$_id\", \"$$movieId\"],\r\n"
					+ "            },\r\n"
					+ "          },\r\n"
					+ "        },\r\n"
					+ "        {\r\n"
					+ "          $set: {\r\n"
					+ "            rating: {\r\n"
					+ "              $first: {\r\n"
					+ "                $filter: {\r\n"
					+ "                  input: \"$ratingList\",\r\n"
					+ "                  as: \"elem\",\r\n"
					+ "                  cond: {\r\n"
					+ "                    $eq: [\"$$elem._id\", ?0],\r\n"
					+ "                  },\r\n"
					+ "                },\r\n"
					+ "              },\r\n"
					+ "            },\r\n"
					+ "          },\r\n"
					+ "        },\r\n"
					+ "        {\r\n"
					+ "          $project: {\r\n"
					+ "            _id: 1,\r\n"
					+ "            title: 1,\r\n"
					+ "            description: 1,\r\n"
					+ "            genres: 1,\r\n"
					+ "            posterLink: 1,\r\n"
					+ "            avgRating: {\r\n"
					+ "              $cond: {\r\n"
					+ "                if: {\r\n"
					+ "                  $eq: [\"$totalRating\", NumberLong(0)],\r\n"
					+ "                },\r\n"
					+ "                then: 0,\r\n"
					+ "                else: {\r\n"
					+ "                  $toDouble: {\r\n"
					+ "                    $divide: [\r\n"
					+ "                      { $toDouble: \"$totalRating\" },\r\n"
					+ "                      { $toDouble: \"$noOfRatings\" },\r\n"
					+ "                    ],\r\n"
					+ "                  },\r\n"
					+ "                },\r\n"
					+ "              },\r\n"
					+ "            },\r\n"
					+ "            noOfRatings: 1,\r\n"
					+ "            userRating: {\r\n"
					+ "              $ifNull: [\"$rating.rating\", 0],\r\n"
					+ "            },\r\n"
					+ "          },\r\n"
					+ "        },\r\n"
					+ "      ],\r\n"
					+ "      as: \"movieObject\",\r\n"
					+ "    },\r\n"
					+ "  }",
					"{\r\n"
					+ "        $group: {\r\n"
					+ "            _id: \"$_id\",\r\n"
					+ "            result: {\r\n"
					+ "                $push: {\r\n"
					+ "                    $first: \"$movieObject\"\r\n"
					+ "                }\r\n"
					+ "            }\r\n"
					+ "        }\r\n"
					+ "    }",
					"{\r\n"
					+ "        $project: {\r\n"
					+ "            _id: 0,\r\n"
					+ "            result: 1\r\n"
					+ "        }\r\n"
					+ "    }"
	})
	MoviePageObject findWatchListMovies(String userId, int index, int length);

	
	@Meta(allowDiskUse = true)
	@Aggregation(pipeline = {
			"{\r\n"
			+ "        $match: {\r\n"
			+ "            userId: ?0\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "        $project: {\r\n"
			+ "            _id: \"$userId\",\r\n"
			+ "            ratingListPage: {\r\n"
			+ "                $slice: [\"$ratingList\", ?1, ?2]\r\n"
			+ "            }\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "        $unwind: {\r\n"
			+ "            path: \"$ratingListPage\",\r\n"
			+ "            preserveNullAndEmptyArrays: true\r\n"
			+ "        }\r\n"
			+ "    }",
			"{\r\n"
			+ "    $lookup: {\r\n"
			+ "      from: \"movieEntity\",\r\n"
			+ "      let: {\r\n"
			+ "        rating: \"$ratingListPage.rating\",\r\n"
			+ "        movieId: \"$ratingListPage._id\",\r\n"
			+ "      },\r\n"
			+ "      pipeline: [\r\n"
			+ "        {\r\n"
			+ "          $match: {\r\n"
			+ "            $expr: {\r\n"
			+ "              $eq: [\"$_id\", \"$$movieId\"],\r\n"
			+ "            },\r\n"
			+ "          },\r\n"
			+ "        },\r\n"
			+ "        {\r\n"
			+ "          $project: {\r\n"
			+ "            _id: 1,\r\n"
			+ "            title: 1,\r\n"
			+ "            description: 1,\r\n"
			+ "            genres: 1,\r\n"
			+ "            posterLink: 1,\r\n"
			+ "            avgRating: {\r\n"
			+ "              $cond: {\r\n"
			+ "                if: {\r\n"
			+ "                  $eq: [\"$totalRating\", NumberLong(0)],\r\n"
			+ "                },\r\n"
			+ "                then: 0,\r\n"
			+ "                else: {\r\n"
			+ "                  $toDouble: {\r\n"
			+ "                    $divide: [\r\n"
			+ "                      { $toDouble: \"$totalRating\" },\r\n"
			+ "                      { $toDouble: \"$noOfRatings\" },\r\n"
			+ "                    ],\r\n"
			+ "                  },\r\n"
			+ "                },\r\n"
			+ "              },\r\n"
			+ "            },\r\n"
			+ "            noOfRatings: 1,\r\n"
			+ "            userRating: \"$$rating\",\r\n"
			+ "          },\r\n"
			+ "        },\r\n"
			+ "      ],\r\n"
			+ "      as: \"movieObject\",\r\n"
			+ "    },\r\n"
			+ "  }",
			"{\r\n"
			+ "        $group: {\r\n"
			+ "            _id: \"$_id\",\r\n"
			+ "            result: {\r\n"
			+ "                $push: {\r\n"
			+ "                    $first: \"$movieObject\"\r\n"
			+ "                }\r\n"
			+ "            }\r\n"
			+ "        }       \r\n"
			+ "    }",
			"{\r\n"
			+ "        $project: {\r\n"
			+ "            _id: 0,\r\n"
			+ "            result: 1\r\n"
			+ "        }\r\n"
			+ "    }"
	})
	MoviePageObject findRatingListMovies(String userId, int index, int length);


	@Meta(allowDiskUse = true)
	@Aggregation(pipeline = {
			"{\r\n"
			+ "    $match: {\r\n"
			+ "      userId: ?1,\r\n"
			+ "    },\r\n"
			+ "  }",
			"{\r\n"
			+ "    $set: {\r\n"
			+ "      isFollowing: {\r\n"
			+ "        $cond: {\r\n"
			+ "          if: {\r\n"
			+ "            $eq: [\r\n"
			+ "              {\r\n"
			+ "                $size: {\r\n"
			+ "                  $filter: {\r\n"
			+ "                    input: \"$followerList\",\r\n"
			+ "                    as: \"elem\",\r\n"
			+ "                    cond: {\r\n"
			+ "                      $eq: [\"$$elem._id\", ?0],\r\n"
			+ "                    },\r\n"
			+ "                  },\r\n"
			+ "                },\r\n"
			+ "              },\r\n"
			+ "              1,\r\n"
			+ "            ],\r\n"
			+ "          },\r\n"
			+ "          then: true,\r\n"
			+ "          else: false,\r\n"
			+ "        },\r\n"
			+ "      },\r\n"
			+ "      isAdmin: {\r\n"
			+ "        $cond: {\r\n"
			+ "          if: {\r\n"
			+ "            $eq: [\r\n"
			+ "              {\r\n"
			+ "                $size: {\r\n"
			+ "                  $filter: {\r\n"
			+ "                    input: \"$roles\",\r\n"
			+ "                    as: \"elem\",\r\n"
			+ "                    cond: {\r\n"
			+ "                      $eq: [\"$$elem\", \"ADMIN\"],\r\n"
			+ "                    },\r\n"
			+ "                  },\r\n"
			+ "                },\r\n"
			+ "              },\r\n"
			+ "              1,\r\n"
			+ "            ],\r\n"
			+ "          },\r\n"
			+ "          then: true,\r\n"
			+ "          else: false,\r\n"
			+ "        },\r\n"
			+ "      },\r\n"
			+ "    },\r\n"
			+ "  }",
			"{\r\n"
			+ "    $project: {\r\n"
			+ "      _id: 1,\r\n"
			+ "      userId: 1,\r\n"
			+ "      isAdmin: 1,\r\n"
			+ "      profilePictureLink: 1,\r\n"
			+ "      noOfFollowers: 1,\r\n"
			+ "      noOfFollowings: 1,\r\n"
			+ "      noOfMovieReviewed: 1,\r\n"
			+ "      noOfMovieRated: 1,\r\n"
			+ "      wishListLength: 1,\r\n"
			+ "      watchListLength: 1,\r\n"
			+ "      isFollowing: 1,\r\n"
			+ "    },\r\n"
			+ "  }"
	})
	UserProfileInfoResponseBody findProfileInfo(String sourceId, String targetId);


	@Meta(allowDiskUse = true)
	@Aggregation(pipeline = {
			"{\r\n"
			+ "    $match: {\r\n"
			+ "      userId: ?0,\r\n"
			+ "    },\r\n"
			+ "  }",
			"{\r\n"
			+ "    $project: {\r\n"
			+ "      _id: 1,\r\n"
			+ "      userId: 1,\r\n"
			+ "      profilePictureLink: 1,\r\n"
			+ "      isAdmin: {\r\n"
			+ "        $cond: {\r\n"
			+ "          if: {\r\n"
			+ "            $eq: [\r\n"
			+ "              {\r\n"
			+ "                $size: {\r\n"
			+ "                  $filter: {\r\n"
			+ "                    input: \"$roles\",\r\n"
			+ "                    as: \"elem\",\r\n"
			+ "                    cond: {\r\n"
			+ "                      $eq: [\"$$elem\", \"ADMIN\"],\r\n"
			+ "                    },\r\n"
			+ "                  },\r\n"
			+ "                },\r\n"
			+ "              },\r\n"
			+ "              1,\r\n"
			+ "            ],\r\n"
			+ "          },\r\n"
			+ "          then: true,\r\n"
			+ "          else: false,\r\n"
			+ "        },\r\n"
			+ "      },\r\n"
			+ "    },\r\n"
			+ "  }"
	})
	UserInfoResponseBody findUserInfo(String userId);

	
}
